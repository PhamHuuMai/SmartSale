#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartSale.Models
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using System.Collections;

    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "SmartSale")]
    public partial class EntityDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertAdministraor(Administraor instance);
        partial void UpdateAdministraor(Administraor instance);
        partial void DeleteAdministraor(Administraor instance);
        partial void InsertBillDetail(BillDetail instance);
        partial void UpdateBillDetail(BillDetail instance);
        partial void DeleteBillDetail(BillDetail instance);
        partial void InsertBill(Bill instance);
        partial void UpdateBill(Bill instance);
        partial void DeleteBill(Bill instance);
        partial void InsertBrand(Brand instance);
        partial void UpdateBrand(Brand instance);
        partial void DeleteBrand(Brand instance);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertImage(Image instance);
        partial void UpdateImage(Image instance);
        partial void DeleteImage(Image instance);
        #endregion

        public EntityDataContext() :
                base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SmartSaleConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public EntityDataContext(string connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public EntityDataContext(System.Data.IDbConnection connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public EntityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public EntityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Administraor> Administraors
        {
            get
            {
                return this.GetTable<Administraor>();
            }
        }

        public System.Data.Linq.Table<BillDetail> BillDetails
        {
            get
            {
                return this.GetTable<BillDetail>();
            }
        }

        public System.Data.Linq.Table<Bill> Bills
        {
            get
            {
                return this.GetTable<Bill>();
            }
        }

        public System.Data.Linq.Table<Brand> Brands
        {
            get
            {
                return this.GetTable<Brand>();
            }
        }

        public System.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public System.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public System.Data.Linq.Table<Image> Images
        {
            get
            {
                return this.GetTable<Image>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Administraor")]
    public partial class Administraor : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Username;

        private string _Password;

        private string _UserType;

        private int _IsDeleted;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnUserTypeChanging(string value);
        partial void OnUserTypeChanged();
        partial void OnIsDeletedChanging(int value);
        partial void OnIsDeletedChanged();
        #endregion

        public Administraor()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Username", DbType = "VarChar(50) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if ((this._Username != value))
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Password", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserType", DbType = "VarChar(10) NOT NULL", CanBeNull = false)]
        public string UserType
        {
            get
            {
                return this._UserType;
            }
            set
            {
                if ((this._UserType != value))
                {
                    this.OnUserTypeChanging(value);
                    this.SendPropertyChanging();
                    this._UserType = value;
                    this.SendPropertyChanged("UserType");
                    this.OnUserTypeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsDeleted", DbType = "Int NOT NULL")]
        public int IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }
            set
            {
                if ((this._IsDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._IsDeleted = value;
                    this.SendPropertyChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BillDetail")]
    public partial class BillDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _IDProduct;

        private int _IDBill;

        private int _Number;

        private double _Price;

        private int _IsDeleted;

        private EntityRef<Bill> _Bill;

        private EntityRef<Product> _Product;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDProductChanging(int value);
        partial void OnIDProductChanged();
        partial void OnIDBillChanging(int value);
        partial void OnIDBillChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();
        partial void OnPriceChanging(double value);
        partial void OnPriceChanged();
        partial void OnIsDeletedChanging(int value);
        partial void OnIsDeletedChanged();
        #endregion

        public BillDetail()
        {
            this._Bill = default(EntityRef<Bill>);
            this._Product = default(EntityRef<Product>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IDProduct", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int IDProduct
        {
            get
            {
                return this._IDProduct;
            }
            set
            {
                if ((this._IDProduct != value))
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnIDProductChanging(value);
                    this.SendPropertyChanging();
                    this._IDProduct = value;
                    this.SendPropertyChanged("IDProduct");
                    this.OnIDProductChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IDBill", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int IDBill
        {
            get
            {
                return this._IDBill;
            }
            set
            {
                if ((this._IDBill != value))
                {
                    if (this._Bill.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnIDBillChanging(value);
                    this.SendPropertyChanging();
                    this._IDBill = value;
                    this.SendPropertyChanged("IDBill");
                    this.OnIDBillChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Price", DbType = "Float NOT NULL")]
        public double Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if ((this._Price != value))
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsDeleted", DbType = "Int NOT NULL")]
        public int IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }
            set
            {
                if ((this._IsDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._IsDeleted = value;
                    this.SendPropertyChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bill_BillDetail", Storage = "_Bill", ThisKey = "IDBill", OtherKey = "ID", IsForeignKey = true)]
        public Bill Bill
        {
            get
            {
                return this._Bill.Entity;
            }
            set
            {
                Bill previousValue = this._Bill.Entity;
                if (((previousValue != value)
                            || (this._Bill.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Bill.Entity = null;
                        previousValue.BillDetails.Remove(this);
                    }
                    this._Bill.Entity = value;
                    if ((value != null))
                    {
                        value.BillDetails.Add(this);
                        this._IDBill = value.ID;
                    }
                    else
                    {
                        this._IDBill = default(int);
                    }
                    this.SendPropertyChanged("Bill");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Product_BillDetail", Storage = "_Product", ThisKey = "IDProduct", OtherKey = "ID", IsForeignKey = true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if (((previousValue != value)
                            || (this._Product.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Product.Entity = null;
                        previousValue.BillDetails.Remove(this);
                    }
                    this._Product.Entity = value;
                    if ((value != null))
                    {
                        value.BillDetails.Add(this);
                        this._IDProduct = value.ID;
                    }
                    else
                    {
                        this._IDProduct = default(int);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Bill")]
    public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private System.DateTime _DateTime;

        private string _PhoneNumber;

        private string _Address;

        private string _Email;

       // private int _IDCustomer;

        private int _IsDeleted;

        private EntitySet<BillDetail> _BillDetails;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDateTimeChanging(System.DateTime value);
        partial void OnDateTimeChanged();
        partial void OnPhoneNumberChanging(string value);
        partial void OnPhoneNumberChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnIDCustomerChanging(int value);
        partial void OnIDCustomerChanged();
        partial void OnIsDeletedChanging(int value);
        partial void OnIsDeletedChanged();
        #endregion

        public Bill()
        {
            this._BillDetails = new EntitySet<BillDetail>(new Action<BillDetail>(this.attach_BillDetails), new Action<BillDetail>(this.detach_BillDetails));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DateTime", DbType = "DateTime NOT NULL")]
        public System.DateTime DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if ((this._DateTime != value))
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging();
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PhoneNumber", DbType = "VarChar(20) NOT NULL", CanBeNull = false)]
        public string PhoneNumber
        {
            get
            {
                return this._PhoneNumber;
            }
            set
            {
                if ((this._PhoneNumber != value))
                {
                    this.OnPhoneNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PhoneNumber = value;
                    this.SendPropertyChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(400) NOT NULL", CanBeNull = false)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Email", DbType = "VarChar(100) NOT NULL", CanBeNull = false)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if ((this._Email != value))
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

        //[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IDCustomer", DbType = "Int NOT NULL")]
        //public int IDCustomer
        //{
        //    get
        //    {
        //        return this._IDCustomer;
        //    }
        //    set
        //    {
        //        if ((this._IDCustomer != value))
        //        {
        //            this.OnIDCustomerChanging(value);
        //            this.SendPropertyChanging();
        //            this._IDCustomer = value;
        //            this.SendPropertyChanged("IDCustomer");
        //            this.OnIDCustomerChanged();
        //        }
        //    }
        //}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsDeleted", DbType = "Int NOT NULL")]
        public int IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }
            set
            {
                if ((this._IsDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._IsDeleted = value;
                    this.SendPropertyChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bill_BillDetail", Storage = "_BillDetails", ThisKey = "ID", OtherKey = "IDBill")]
        public EntitySet<BillDetail> BillDetails
        {
            get
            {
                return this._BillDetails;
            }
            set
            {
                this._BillDetails.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BillDetails(BillDetail entity)
        {
            this.SendPropertyChanging();
            entity.Bill = this;
        }

        private void detach_BillDetails(BillDetail entity)
        {
            this.SendPropertyChanging();
            entity.Bill = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Brand")]
    public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _BrandName;

        private string _FromTo;

        private int _IsDeleted;

        private EntitySet<Product> _Products;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBrandNameChanging(string value);
        partial void OnBrandNameChanged();
        partial void OnFromToChanging(string value);
        partial void OnFromToChanged();
        partial void OnIsDeletedChanging(int value);
        partial void OnIsDeletedChanged();
        #endregion

        public Brand()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrandName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string BrandName
        {
            get
            {
                return this._BrandName;
            }
            set
            {
                if ((this._BrandName != value))
                {
                    this.OnBrandNameChanging(value);
                    this.SendPropertyChanging();
                    this._BrandName = value;
                    this.SendPropertyChanged("BrandName");
                    this.OnBrandNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromTo", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string FromTo
        {
            get
            {
                return this._FromTo;
            }
            set
            {
                if ((this._FromTo != value))
                {
                    this.OnFromToChanging(value);
                    this.SendPropertyChanging();
                    this._FromTo = value;
                    this.SendPropertyChanged("FromTo");
                    this.OnFromToChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsDeleted", DbType = "Int NOT NULL")]
        public int IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }
            set
            {
                if ((this._IsDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._IsDeleted = value;
                    this.SendPropertyChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Brand_Product", Storage = "_Products", ThisKey = "ID", OtherKey = "IDBrand")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging();
            entity.Brand = this;
        }

        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging();
            entity.Brand = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Category")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _CategoryName;

        private System.Nullable<int> _CategoryParent;

        private string _IsDeleted;

        private EntitySet<Category> _Categories;

        private EntitySet<Product> _Products;

        private EntityRef<Category> _Category1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnCategoryParentChanging(System.Nullable<int> value);
        partial void OnCategoryParentChanged();
        partial void OnIsDeletedChanging(string value);
        partial void OnIsDeletedChanged();
        #endregion

        public Category()
        {
            this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            this._Category1 = default(EntityRef<Category>);
            OnCreated();
        }
        public bool Equals(Category cat)
        {
            if (cat.ID == this.ID && cat.CategoryName.Equals(this.CategoryName))
            {
                return true;
            }
            return false;
        }
        public Category(int id, String name)
        {
            this.ID = id;
            this.CategoryName = name;
            this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            this._Category1 = default(EntityRef<Category>);
            OnCreated();
        }
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CategoryName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if ((this._CategoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CategoryParent", DbType = "Int")]
        public System.Nullable<int> CategoryParent
        {
            get
            {
                return this._CategoryParent;
            }
            set
            {
                if ((this._CategoryParent != value))
                {
                    if (this._Category1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCategoryParentChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryParent = value;
                    this.SendPropertyChanged("CategoryParent");
                    this.OnCategoryParentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsDeleted", DbType = "NChar(10) NOT NULL", CanBeNull = false)]
        public string IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }
            set
            {
                if ((this._IsDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._IsDeleted = value;
                    this.SendPropertyChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Category_Category", Storage = "_Categories", ThisKey = "ID", OtherKey = "CategoryParent")]
        public EntitySet<Category> Categories
        {
            get
            {
                return this._Categories;
            }
            set
            {
                this._Categories.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Category_Product", Storage = "_Products", ThisKey = "ID", OtherKey = "IDCategory")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Category_Category", Storage = "_Category1", ThisKey = "CategoryParent", OtherKey = "ID", IsForeignKey = true)]
        public Category Category1
        {
            get
            {
                return this._Category1.Entity;
            }
            set
            {
                Category previousValue = this._Category1.Entity;
                if (((previousValue != value)
                            || (this._Category1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Category1.Entity = null;
                        previousValue.Categories.Remove(this);
                    }
                    this._Category1.Entity = value;
                    if ((value != null))
                    {
                        value.Categories.Add(this);
                        this._CategoryParent = value.ID;
                    }
                    else
                    {
                        this._CategoryParent = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Category1");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Categories(Category entity)
        {
            this.SendPropertyChanging();
            entity.Category1 = this;
        }

        private void detach_Categories(Category entity)
        {
            this.SendPropertyChanging();
            entity.Category1 = null;
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging();
            entity.Category = this;
        }

        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging();
            entity.Category = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Product")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Model;

        private string _ProductName;

        private string _Color;

        private int _Size;

        private double _OldPrice;

        private double _NewPrice;

        private string _Description;

        private string _Tag;

        private string _ReviewProduct;

        private int _IDCategory;

        private int _IDBrand;

        private int _IsDeleted;

        private EntitySet<BillDetail> _BillDetails;

        private EntitySet<Image> _Images;

        private EntityRef<Brand> _Brand;

        private EntityRef<Category> _Category;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnSizeChanging(int value);
        partial void OnSizeChanged();
        partial void OnOldPriceChanging(double value);
        partial void OnOldPriceChanged();
        partial void OnNewPriceChanging(double value);
        partial void OnNewPriceChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTagChanging(string value);
        partial void OnTagChanged();
        partial void OnReviewProductChanging(string value);
        partial void OnReviewProductChanged();
        partial void OnIDCategoryChanging(int value);
        partial void OnIDCategoryChanged();
        partial void OnIDBrandChanging(int value);
        partial void OnIDBrandChanged();
        partial void OnIsDeletedChanging(int value);
        partial void OnIsDeletedChanged();
        #endregion
     
        public IEnumerable<Image> _GetIm
        {
            get
            {
                EntityDataContext data = new EntityDataContext();
                return (from i in data.Images
                       where i.IDProduct == this.ID
                       select i).AsEnumerable();
            }
        }

        public Product()
        {
            this._BillDetails = new EntitySet<BillDetail>(new Action<BillDetail>(this.attach_BillDetails), new Action<BillDetail>(this.detach_BillDetails));
            this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
            this._Brand = default(EntityRef<Brand>);
            this._Category = default(EntityRef<Category>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]

        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Model", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if ((this._Model != value))
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ProductName", DbType = "NVarChar(4000) NOT NULL", CanBeNull = false)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if ((this._ProductName != value))
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Color", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if ((this._Color != value))
                {
                    this.OnColorChanging(value);
                    this.SendPropertyChanging();
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Size", DbType = "Int NOT NULL")]
        public int Size
        {
            get
            {
                return this._Size;
            }
            set
            {
                if ((this._Size != value))
                {
                    this.OnSizeChanging(value);
                    this.SendPropertyChanging();
                    this._Size = value;
                    this.SendPropertyChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OldPrice", DbType = "Float NOT NULL")]
        public double OldPrice
        {
            get
            {
                return this._OldPrice;
            }
            set
            {
                if ((this._OldPrice != value))
                {
                    this.OnOldPriceChanging(value);
                    this.SendPropertyChanging();
                    this._OldPrice = value;
                    this.SendPropertyChanged("OldPrice");
                    this.OnOldPriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NewPrice", DbType = "Float NOT NULL")]
        public double NewPrice
        {
            get
            {
                return this._NewPrice;
            }
            set
            {
                if ((this._NewPrice != value))
                {
                    this.OnNewPriceChanging(value);
                    this.SendPropertyChanging();
                    this._NewPrice = value;
                    this.SendPropertyChanged("NewPrice");
                    this.OnNewPriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(4000) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Tag", DbType = "NVarChar(4000) NOT NULL", CanBeNull = false)]
        public string Tag
        {
            get
            {
                return this._Tag;
            }
            set
            {
                if ((this._Tag != value))
                {
                    this.OnTagChanging(value);
                    this.SendPropertyChanging();
                    this._Tag = value;
                    this.SendPropertyChanged("Tag");
                    this.OnTagChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ReviewProduct", DbType = "NVarChar(4000) NOT NULL", CanBeNull = false)]
        public string ReviewProduct
        {
            get
            {
                return this._ReviewProduct;
            }
            set
            {
                if ((this._ReviewProduct != value))
                {
                    this.OnReviewProductChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewProduct = value;
                    this.SendPropertyChanged("ReviewProduct");
                    this.OnReviewProductChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IDCategory", DbType = "Int NOT NULL")]
        public int IDCategory
        {
            get
            {
                return this._IDCategory;
            }
            set
            {
                if ((this._IDCategory != value))
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnIDCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._IDCategory = value;
                    this.SendPropertyChanged("IDCategory");
                    this.OnIDCategoryChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IDBrand", DbType = "Int NOT NULL")]
        public int IDBrand
        {
            get
            {
                return this._IDBrand;
            }
            set
            {
                if ((this._IDBrand != value))
                {
                    if (this._Brand.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnIDBrandChanging(value);
                    this.SendPropertyChanging();
                    this._IDBrand = value;
                    this.SendPropertyChanged("IDBrand");
                    this.OnIDBrandChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsDeleted", DbType = "Int NOT NULL")]
        public int IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }
            set
            {
                if ((this._IsDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._IsDeleted = value;
                    this.SendPropertyChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Product_BillDetail", Storage = "_BillDetails", ThisKey = "ID", OtherKey = "IDProduct")]
        public EntitySet<BillDetail> BillDetails
        {
            get
            {
                return this._BillDetails;
            }
            set
            {
                this._BillDetails.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Product_Image", Storage = "_Images", ThisKey = "ID", OtherKey = "IDProduct")]
        public EntitySet<Image> Images
        {
            get
            {
                return this._Images;
            }
            set
            {
                this._Images.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Brand_Product", Storage = "_Brand", ThisKey = "IDBrand", OtherKey = "ID", IsForeignKey = true)]
        public Brand Brand
        {
            get
            {
                return this._Brand.Entity;
            }
            set
            {
                Brand previousValue = this._Brand.Entity;
                if (((previousValue != value)
                            || (this._Brand.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Brand.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Brand.Entity = value;
                    if ((value != null))
                    {
                        value.Products.Add(this);
                        this._IDBrand = value.ID;
                    }
                    else
                    {
                        this._IDBrand = default(int);
                    }
                    this.SendPropertyChanged("Brand");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Category_Product", Storage = "_Category", ThisKey = "IDCategory", OtherKey = "ID", IsForeignKey = true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if (((previousValue != value)
                            || (this._Category.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Category.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Category.Entity = value;
                    if ((value != null))
                    {
                        value.Products.Add(this);
                        this._IDCategory = value.ID;
                    }
                    else
                    {
                        this._IDCategory = default(int);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }


        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BillDetails(BillDetail entity)
        {
            this.SendPropertyChanging();
            entity.Product = this;
        }

        private void detach_BillDetails(BillDetail entity)
        {
            this.SendPropertyChanging();
            entity.Product = null;
        }

        private void attach_Images(Image entity)
        {
            this.SendPropertyChanging();
            entity.Product = this;
        }

        private void detach_Images(Image entity)
        {
            this.SendPropertyChanging();
            entity.Product = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Image")]
    public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _name;

        private string _url;

        private string _extend;

        private System.Nullable<int> _IDProduct;

        private EntityRef<Product> _Product;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnurlChanging(string value);
        partial void OnurlChanged();
        partial void OnextendChanging(string value);
        partial void OnextendChanged();
        partial void OnIDProductChanging(System.Nullable<int> value);
        partial void OnIDProductChanged();
        #endregion

        public Image()
        {
            this._Product = default(EntityRef<Product>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "VarChar(500) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_url", DbType = "VarChar(500) NOT NULL", CanBeNull = false)]
        public string url
        {
            get
            {
                return this._url;
            }
            set
            {
                if ((this._url != value))
                {
                    this.OnurlChanging(value);
                    this.SendPropertyChanging();
                    this._url = value;
                    this.SendPropertyChanged("url");
                    this.OnurlChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_extend", DbType = "VarChar(500) NOT NULL", CanBeNull = false)]
        public string extend
        {
            get
            {
                return this._extend;
            }
            set
            {
                if ((this._extend != value))
                {
                    this.OnextendChanging(value);
                    this.SendPropertyChanging();
                    this._extend = value;
                    this.SendPropertyChanged("extend");
                    this.OnextendChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IDProduct", DbType = "Int")]
        public System.Nullable<int> IDProduct
        {
            get
            {
                return this._IDProduct;
            }
            set
            {
                if ((this._IDProduct != value))
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnIDProductChanging(value);
                    this.SendPropertyChanging();
                    this._IDProduct = value;
                    this.SendPropertyChanged("IDProduct");
                    this.OnIDProductChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Product_Image", Storage = "_Product", ThisKey = "IDProduct", OtherKey = "ID", IsForeignKey = true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if (((previousValue != value)
                            || (this._Product.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Product.Entity = null;
                        previousValue.Images.Remove(this);
                    }
                    this._Product.Entity = value;
                    if ((value != null))
                    {
                        value.Images.Add(this);
                        this._IDProduct = value.ID;
                    }
                    else
                    {
                        this._IDProduct = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591
